// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BootstrapInitParameters struct {

	// Initial password for Admin user. Default: admin (string)
	InitialPasswordSecretRef *v1.SecretKeySelector `json:"initialPasswordSecretRef,omitempty" tf:"-"`

	// or generating a random one.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Send telemetry anonymous data. Default: false (bool)
	Telemetry *bool `json:"telemetry,omitempty" tf:"telemetry,omitempty"`

	// TTL in seconds for generated admin token. Default: 0  (int)
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// Regenerate admin token. Default: false (bool)
	TokenUpdate *bool `json:"tokenUpdate,omitempty" tf:"token_update,omitempty"`

	// Default UI landing for k8s clusters. Available options: ember (cluster manager ui)  and vue (cluster explorer ui). Default: ember (string)
	UIDefaultLanding *string `json:"uiDefaultLanding,omitempty" tf:"ui_default_landing,omitempty"`
}

type BootstrapObservation struct {

	// (Computed) The ID of the resource (string)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Send telemetry anonymous data. Default: false (bool)
	Telemetry *bool `json:"telemetry,omitempty" tf:"telemetry,omitempty"`

	// (Computed) Generated API temporary token id as helper. Should be empty (string)
	TempTokenID *string `json:"tempTokenId,omitempty" tf:"temp_token_id,omitempty"`

	// (Computed) Generated API token id for Admin User (string)
	TokenID *string `json:"tokenId,omitempty" tf:"token_id,omitempty"`

	// TTL in seconds for generated admin token. Default: 0  (int)
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// Regenerate admin token. Default: false (bool)
	TokenUpdate *bool `json:"tokenUpdate,omitempty" tf:"token_update,omitempty"`

	// Default UI landing for k8s clusters. Available options: ember (cluster manager ui)  and vue (cluster explorer ui). Default: ember (string)
	UIDefaultLanding *string `json:"uiDefaultLanding,omitempty" tf:"ui_default_landing,omitempty"`

	// (Computed) URL set as server-url (string)
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Computed) Admin username (string)
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type BootstrapParameters struct {

	// Initial password for Admin user. Default: admin (string)
	// +kubebuilder:validation:Optional
	InitialPasswordSecretRef *v1.SecretKeySelector `json:"initialPasswordSecretRef,omitempty" tf:"-"`

	// or generating a random one.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Send telemetry anonymous data. Default: false (bool)
	// +kubebuilder:validation:Optional
	Telemetry *bool `json:"telemetry,omitempty" tf:"telemetry,omitempty"`

	// TTL in seconds for generated admin token. Default: 0  (int)
	// +kubebuilder:validation:Optional
	TokenTTL *float64 `json:"tokenTtl,omitempty" tf:"token_ttl,omitempty"`

	// Regenerate admin token. Default: false (bool)
	// +kubebuilder:validation:Optional
	TokenUpdate *bool `json:"tokenUpdate,omitempty" tf:"token_update,omitempty"`

	// Default UI landing for k8s clusters. Available options: ember (cluster manager ui)  and vue (cluster explorer ui). Default: ember (string)
	// +kubebuilder:validation:Optional
	UIDefaultLanding *string `json:"uiDefaultLanding,omitempty" tf:"ui_default_landing,omitempty"`
}

// BootstrapSpec defines the desired state of Bootstrap
type BootstrapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BootstrapParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BootstrapInitParameters `json:"initProvider,omitempty"`
}

// BootstrapStatus defines the observed state of Bootstrap.
type BootstrapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BootstrapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Bootstrap is the Schema for the Bootstraps API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rancher}
type Bootstrap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BootstrapSpec   `json:"spec"`
	Status            BootstrapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BootstrapList contains a list of Bootstraps
type BootstrapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bootstrap `json:"items"`
}

// Repository type metadata.
var (
	Bootstrap_Kind             = "Bootstrap"
	Bootstrap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bootstrap_Kind}.String()
	Bootstrap_KindAPIVersion   = Bootstrap_Kind + "." + CRDGroupVersion.String()
	Bootstrap_GroupVersionKind = CRDGroupVersion.WithKind(Bootstrap_Kind)
)

func init() {
	SchemeBuilder.Register(&Bootstrap{}, &BootstrapList{})
}
